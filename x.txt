
1. 空格的把控 多看代码 多打代码
2. 减少不必要代码
3. 变量按类型归类 注入在一堆 对象在一堆
4. 代码保持整洁！！！
5. 警告不能出现
6. 有关系的代码放在一起 逻辑顺序清楚
7. 测试不适没报错就行，需要一步一步debug 确保调试过程中的代码都正确执行 特别注意null 
8. 测试完成后务必检查数据库是否如预期更改
9. 做需求时 减少增加接口 许多接口都是模糊匹配的 
10. 多问 把需求和问题搞清楚
11. 不要乱改数据库 把表关系理清
12. 作为开发人员要把开发工具摸透 让它为你服务
13. 不断学习 实践 找问题要快


线上数据库用户名和密码

连接方法：ssh readonly_db@121.41.54.182

密码：yaBeReadonly

GitHub地址：

https://github.com/mobilefirstlink/firstlink/wiki

用户名和密码：mobilefirstlink@gmail.com＝123456poiqwe


1. 定时爬取物流		@王胜	
	查出所有德国奶粉的包裹(已发货状态 & 转运到国内状态)
		德国奶粉供应方下订单到包裹

	根据包裹的运单号查询物流
	物流解析插入数据库(转码 去重插入)

	抓取到国内物流时，置包裹状态为REACH_CN
	抓去到物流信息包裹 “签收人” 字符串时，修改包裹状态为已签收

	一天查询3次

【链接】FirstLinkCRMSystem老版
http://dev.fine3q.com/link-site/web/crm/login.do
dev新版
http://dev.fine3q.com:8888/login.html?originUrl=%2Fproduct%2Fproduct_list.html
【链接】FirstLinkCRMSystem第三个：生产环境老版
http://www.duoshoubang.cn/link-site/web/crm/login.do
生产环境新版
http://crm.duoshoubang.cn/product/product_list.html



<action name="find_product_post_orders_shipoffline" class="productPostOrderDirectMailAction" method="findProductPostOrdersShipOffline">
	<result name="success">/WEB-INF/jsp/product_post_order_direct_mail/product_post_order_direct_mail_shipoffline_list.jsp</result>
</action>

－－sql优化
Mybatis的配置SQL时，尽量少用if choose 等标签，能用SQL实现判断的尽量用SQL来判断(CASE WHEN ,DECODE等)，以便后期维护。否则，一旦SQL膨胀，超级恶心，如果需要调试Mybatis中的SQL，需要去除大量的判断语句，非常麻烦。另一方面，大量的if判断，会使生成的SQL中包含大量的空格，增加网络传输的时间，也不可取。

而且大量的if choose语句，不可避免地，每次生成的SQL会不太一致，会导致ORACLE大量的硬解析，也不可取。 

影响SQL执行效率的一般情况下是JOIN、ORDER BY、DISTINCT、PARTITATION BY等这些操作，这些操作一般与表结构设计有很大的关联。相对于这些的效率影响程度，函数解析对于SQL执行速度影响应该是可以忽略不计的。

lucence搜索引擎 取代like 全文搜索

没有事务的时候，在执行一条sql语句看到执行前点的数据状态，保证数据一致性
只读事务，在执行多条sql语句看到执行前点的数据状态，保证数据一致性
对于只读查询，可以指定事务类型为readonly，即只读事务。由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log
事务的几种传播特性
1. PROPAGATION_REQUIRED: 如果存在一个事务，则支持当前事务。如果没有事务则开启
2. PROPAGATION_SUPPORTS: 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行
3. PROPAGATION_MANDATORY: 如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。
4. PROPAGATION_REQUIRES_NEW: 总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。
5. PROPAGATION_NOT_SUPPORTED: 总是非事务地执行，并挂起任何存在的事务。
6. PROPAGATION_NEVER: 总是非事务地执行，如果存在一个活动事务，则抛出异常
7. PROPAGATION_NESTED：如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按TransactionDefinition.PROPAGATION_REQUIRED 属性执行

Spring事务的隔离级别
1. ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.
      另外四个与JDBC的隔离级别相对应
2. ISOLATION_READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。
      这种隔离级别会产生脏读，不可重复读和幻像读。
3. ISOLATION_READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据
4. ISOLATION_REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。
      它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。
5. ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。
      除了防止脏读，不可重复读外，还避免了幻像读。 

其中的一些概念的说明：

  脏读: 指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另外一 个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。

不可重复读: 指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。 那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。

 幻觉读: 指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及 到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。

－－拓展
1.代码整洁之道
2.JDK API 源码  java.util.concurrent
3.市长的代码
4.资料推荐--GoogleJava编码规范http://www.cnblogs.com/rollenholt/p/3690432.html
5.Head First Java 设计之道
6.框架https://github.com/adar-w/Lzy
7.Git教程http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/
8.事务的传播级别  只读事务与无事务的差别
9.luence

分支管理策略